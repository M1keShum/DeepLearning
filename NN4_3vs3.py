"""Нейронная сеть с несколькими входами и несколькими выходами(3*3)"""
############################################################
"""
По сути сеть с 3мя входами и 3мя выходами можно рассмотреть как 3 отдельных сети, у которых 3 входа и 1 выход.
Просто 3 входа и 1 выход. И таких 3 штуки.
"""
# Данную сеть рассмотрим как три веса, входящих в каждый выход.
# Сеть с 3мя входами и 3мя выходами. Каждый выход имеет отдельный вес для каждого входа.
# Т.е. 1й выход имеет отдельные веса для каждого из 3х входов,
#      2й выход имеет отдельные веса для каждого из 3х входов,
#      3й выход имеет отдельные веса для каждого из 3х входов


weights = [[0.1, 0.1, -0.3],  # 3 веса идущие к первому выходу(от каждого входа по одному весу)
           [0.1, 0.2, 0.0],  # 3 веса идущие к второму выходу(от каждого входа по одному весу)
           [0.0, 1.3, 0.1]]  # 3 веса идущие к третьему выходу(от каждого входа по одному весу)

# У первого входа должен быть весовой коэффициент для каждого выхода, сколько бы их ни было
# У второго входа также
# У каждого входа должно быть столько весов, сколько присутствует выходов

toes = [8.5, 9.5, 9.9, 9.0]
wlrec = [0.65, 0.8, 0.8, 0.9]
nfans = [1.2, 1.3, 0.5, 1.0]    # 3 типа входных данных

input = [toes[0], wlrec[0], nfans[0]]  # Вектор входа, подающий на вход 3 точки данных(3 входа)


def w_sum(a, b):
    assert(len(a) == len(b))
    output = 0
    for i in range(len(a)):
        output += (a[i] * b[i])
    return output


def vect_mat_mul(vect, matrix):
    assert(len(vect) == len(matrix))
    output = [0, 0, 0]
    for i in range(len(vect)):
        output[i] = w_sum(vect, matrix[i])  # Передаём в функцию вектор входных данных и вес, соответствующий номеру \
        #                                                                                                      выхода
    return output


"""
Для того, чтобы найти первый выход, нужно 1й вход умножить на его 1й вес, 2й вход на его 1й вес, 3й вход на его 1й вес, 
а затем сложить.
Для того, чтобы найти второй выход, нужно 1й вход умножить на его 2й вес, 2й вход на его 2й вес, 3й вход на его 2й вес, 
а затем сложить.
Для того, чтобы найти третий выход, нужно 1й вход умножить на его 3й вес, 2й вход на его 3й вес, 3й вход на его 3й вес, 
а затем сложить.
"""


def neural_network(input, weights):
    pred = vect_mat_mul(input, weights)
    return pred


pred = neural_network(input, weights)

print(pred)